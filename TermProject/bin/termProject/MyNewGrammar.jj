/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyNewGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(MyNewGrammar)package termProject;
import java.io.*;

public class MyNewGrammar/*@bgen(jjtree)*/implements MyNewGrammarTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTMyNewGrammarState jjtree = new JJTMyNewGrammarState();

/*@egen*/
  static int count = 0;
  static MySymbolTable sym = new MySymbolTable();
  static SemanticAnalyzer sa = new SemanticAnalyzer();
  static TreeTraversal tt = new TreeTraversal();
  static IRGeneration ir = new IRGeneration();  public static void main(String args []) throws ParseException, FileNotFoundException  {    System.out.println("Reading from file...");        new MyNewGrammar(new FileInputStream("ejaz.txt"));    try    {
      System.out.println("\nMessages of parser\n");      SimpleNode n = MyNewGrammar.Start();
      System.out.println("\nVariables\n");
      sym.show();
      System.out.println("\nMessages of semantic analyzer\n");
      sa.typeChecking(n);
      System.out.println("\nAST\n");      n.dump("");
      System.out.println("\nIR Generation\n"+ir.InterMedCode(n));
      //System.out.println("\nTree Traversal Testing\n");
      //tt.treeTraversalTest(n);       System.out.println("\nThank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(MyNewGrammar)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}
/* COMMON TOEKNS AND KEYWORDS */
TOKEN:
{
  < INT:"int">
| < FLOAT:"float">
| < SWITCH:"switch">
| < CASE:"case">
| < DEFALT:"default">
| < OUTPUT:"output">
| < FORLOOP:"forLoop">
| < ENDLOOP:"endLoop">
| < STPRO:"StartProgram">
| < EDPRO:"EndProgram">
| < INITBLOCK:"InitBlock:">
| < CODEBLOCK:"CodeBlock:">
| < COMMA:",">
| < PLUS:"+">
| < MUL:"*">
| < MINUS:"-">
| < DIVIDE:"/">
| < GE:">=">
| < LE:"<=">
| < EQ:"==">
| < LT:"<">
| < GT:">">
| < ASSIGN:"=">
| < SEMICOLON:";">
| < COLON:":">
|  < INCREAMENT:"++">
| < DECREAMENT:"--">
}
/* INDENTIFIERS AND OTHER IMPORTANT TOKENS */TOKEN : {  < IDENTIFIER :    < LETTER1 >    (      < LETTER1 >    | < DIGIT >    )* >
| < DECIMAL:< INTEGER>("."< INTEGER>)?>
| < INTEGER:(<DIGIT>)+>
| < STRING:< QUOTE>(< LETTER>)+< QUOTE>>
| < QUOTE:"\"">
| < #LETTER: [" ", "a"-"z", "A"-"Z"]>| < #LETTER1 : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}SimpleNode Start() :{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  < STPRO>
  initBlock()
  codeBlock()
  < EDPRO>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void initBlock():
{/*@bgen(jjtree) initBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTINITBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) initBlock */
  try {
/*@egen*/
  < INITBLOCK>
  (    declaration()
  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void declaration():
{/*@bgen(jjtree) declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declaration */
  try {
/*@egen*/
  integerSect()
|
  floatSect()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void integerSect():
{/*@bgen(jjtree) integerSect */
 SimpleNode jjtn000 = new SimpleNode(JJTINTEGERSECT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
}
{/*@bgen(jjtree) integerSect */
  try {
/*@egen*/
  
  t=< INT>
  { jjtn000.value = t.image;}
   identifier("int") (initialization("int"))?
  (
    < COMMA>
    (
      identifier("int") (initialization("int"))?    )  )*
  < SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void floatSect():
{/*@bgen(jjtree) floatSect */
 SimpleNode jjtn000 = new SimpleNode(JJTFLOATSECT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
}
{/*@bgen(jjtree) floatSect */
  try {
/*@egen*/
  t=< FLOAT>
  { jjtn000.value = t.image;}
   identifier("float") (initialization("float"))?
  (
    < COMMA>
    (
      identifier("float") (initialization("float"))?
    )
  )*
  < SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void identifier(String type):
{/*@bgen(jjtree) identifier */
 SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
 }
{/*@bgen(jjtree) identifier */
  try {
/*@egen*/
  t=< IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (type.equals("int"))
    {
      jjtn000.value = t.image;
      jjtn000.setType("int");
      if(sym.checkValue(t.image))
      {
         System.out.println(t.image + " is already Declared");
      }
      else
      { 
        sym.put(("ID" + count++), "int " + t.image);
      }
    }
    else if (type.equals("float"))
    {
      jjtn000.value = t.image;
      jjtn000.setType("float");
      if(sym.checkValue(t.image))
      {
         System.out.println(t.image + " is already Declared");
      }
      else
      { 
        sym.put(("ID" + count++), "float " + t.image);
      }
    }
    else
    {
      jjtn000.value = t.image;
      String valueType = sym.fetchType(t.image);
      if (valueType != null)
      {
        if (valueType.equals("int"))
        {
          jjtn000.setType("int");
        }
        else if (valueType.equals("float"))
        {
          jjtn000.setType("float");
        }
      }
      if(sym.checkValue(t.image))
      {
         System.out.println(t.image + " is declared");
      }
      else
      { 
        System.out.println(t.image + " is not declared");
      }
    }
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void initialization(String type):
{/*@bgen(jjtree) initialization */
 SimpleNode jjtn000 = new SimpleNode(JJTINITIALIZATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
}
{/*@bgen(jjtree) initialization */
  try {
/*@egen*/
  t=< ASSIGN> { jjtn000.value = t.image;}
  constant()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void constant():
{/*@bgen(jjtree) constant */
 SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
}
{/*@bgen(jjtree) constant */
  try {
/*@egen*/
  t=<INTEGER>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { jjtn000.value = t.image;}
 | t=< DECIMAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void codeBlock():
{/*@bgen(jjtree) codeBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTCODEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) codeBlock */
  try {
/*@egen*/
  < CODEBLOCK>
  switchSect()
  outputSect()
  forSect()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void switchSect():
{/*@bgen(jjtree) switchSect */
 SimpleNode jjtn000 = new SimpleNode(JJTSWITCHSECT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
}
{/*@bgen(jjtree) switchSect */
  try {
/*@egen*/
  t=< SWITCH> { jjtn000.value = t.image;} "(" identifier("") ")" < COLON> switchBody()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void switchBody():{/*@bgen(jjtree) switchBody */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) switchBody */
  try {
/*@egen*/
  "{"
  (caseSect())+
  defaultSect()
  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void defaultSect():
{/*@bgen(jjtree) defaultSect */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFAULTSECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) defaultSect */
  try {
/*@egen*/
  t=< DEFALT> { jjtn000.value = t.image;}< COLON> (assignmentStatement() < SEMICOLON>)+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void caseSect():
{/*@bgen(jjtree) caseSect */
 SimpleNode jjtn000 = new SimpleNode(JJTCASESECT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
}
{/*@bgen(jjtree) caseSect */
  try {
/*@egen*/
  t=< CASE> { jjtn000.value = t.image;} "(" condStatement() ")"  < COLON> (assignmentStatement() < SEMICOLON>)+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void condStatement():
{/*@bgen(jjtree) condStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) condStatement */
  try {
/*@egen*/
  identifier("") condOp() identifier("")/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void condOp():
{/*@bgen(jjtree) condOp */
SimpleNode jjtn000 = new SimpleNode(JJTCONDOP);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token t;
}
{/*@bgen(jjtree) condOp */
   try {
/*@egen*/
   t=< GT>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ { jjtn000.value = t.image;}
 | t=< GE>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/{ jjtn000.value = t.image;}
 | t=< LT>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/{ jjtn000.value = t.image;}
 | t=< LE>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/{ jjtn000.value = t.image;}
 | t=< EQ>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/{ jjtn000.value = t.image;}/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void assignmentStatement():
{/*@bgen(jjtree) assignmentStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTSTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
}
{/*@bgen(jjtree) assignmentStatement */
 try {
/*@egen*/
 LHS() t=< ASSIGN>{ jjtn000.value = t.image;} RHS()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
void LHS():
{/*@bgen(jjtree) LHS */
  SimpleNode jjtn000 = new SimpleNode(JJTLHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LHS */
  try {
/*@egen*/
  identifier("")/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void RHS():
{/*@bgen(jjtree) RHS */
  SimpleNode jjtn000 = new SimpleNode(JJTRHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RHS */
 try {
/*@egen*/
 additionOperation()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
void additionOperation() :
{/*@bgen(jjtree) additionOperation */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIONOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) additionOperation */
  try {
/*@egen*/
  multiplicationOperation()
  (
   intermediateAddition()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void intermediateAddition():
{/*@bgen(jjtree) intermediateAddition */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERMEDIATEADDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) intermediateAddition */
   try {
/*@egen*/
   (
      t = < PLUS >
      {
        jjtn000.value = t.image;
        jjtn000.setType("ADDOP");
      }
    | t = < MINUS >
      {
        jjtn000.value = t.image;
        jjtn000.setType("SUBOP");
      }
    )
     multiplicationOperation()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/  
}
void  multiplicationOperation() :
{/*@bgen(jjtree) multiplicationOperation */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIONOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) multiplicationOperation */
  try {
/*@egen*/
  identCons()
  (
    intermediateMultiplication()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void intermediateMultiplication():
{/*@bgen(jjtree) intermediateMultiplication */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERMEDIATEMULTIPLICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) intermediateMultiplication */
  try {
/*@egen*/
  (
      t = < MUL >
      {
        jjtn000.value = t.image;
        jjtn000.setType("MULOP");
      }
    | t = < DIVIDE >
      {
        jjtn000.value = t.image;
        jjtn000.setType("DIVOP");
      }
    )
    identCons()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void identCons():
{/*@bgen(jjtree) identCons */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTCONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) identCons */
  try {
/*@egen*/
  identifier("") | constant()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void outputSect():
{/*@bgen(jjtree) outputSect */
 SimpleNode jjtn000 = new SimpleNode(JJTOUTPUTSECT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
 }
{/*@bgen(jjtree) outputSect */
  try {
/*@egen*/
  t=< OUTPUT>{ jjtn000.value = t.image;} "(" identifier("") ")" < SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void forSect():
{/*@bgen(jjtree) forSect */
 SimpleNode jjtn000 = new SimpleNode(JJTFORSECT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
}
{/*@bgen(jjtree) forSect */
  try {
/*@egen*/
  t=< FORLOOP>{ jjtn000.value = t.image;}
  "(" declare() < SEMICOLON> condStatement() < SEMICOLON> InDeOperation() < SEMICOLON> ")"
  forBody()
  < ENDLOOP>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}
void forBody():
{/*@bgen(jjtree) forBody */
  SimpleNode jjtn000 = new SimpleNode(JJTFORBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) forBody */
  try {
/*@egen*/
  (assignmentStatement() < SEMICOLON>)+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void declare():
{/*@bgen(jjtree) declare */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declare */
  try {
/*@egen*/
  identifier("") initialization("")/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void InDeOperation():
{/*@bgen(jjtree) InDeOperation */
  SimpleNode jjtn000 = new SimpleNode(JJTINDEOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InDeOperation */
 try {
/*@egen*/
 identifier("") InDeOperator()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
void InDeOperator():
{/*@bgen(jjtree) InDeOperator */
 SimpleNode jjtn000 = new SimpleNode(JJTINDEOPERATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 Token t;
}
{/*@bgen(jjtree) InDeOperator */
 try {
/*@egen*/
 t=< INCREAMENT>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{ jjtn000.value = t.image;}
| t=< DECREAMENT>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{ jjtn000.value = t.image;}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}